import os
import requests
from json import dump, load
from time import sleep
from datetime import datetime

from methods import sender
from methods.logger import error_log
from methods.connect import db_connect
from methods.variables import admins_list, time_dict, api_host, day_dict, social_network

sm = "ü§ñ"


def isAdmin(user_id):
    return True if user_id in admins_list else False


def validate_group(group):
    valid_group = group.split("-")
    if len(valid_group) < 3:
        return False
    if not valid_group[1].isnumeric() and not valid_group[2].isnumeric():
        return False
    return True


def get_teacher_icon(name):
    try:
        symbol = name.split(' ', 1)[0]
        return "üë©‚Äçüè´" if symbol[len(symbol) - 1] == "–∞" else "üë®‚Äçüè´"
    except IndexError:
        return ""


def get_time_icon(local_time):
    try:
        return time_dict[local_time[:2]]
    except Exception as er:
        error_log(er)
        return "üïê"


def get_week(user_id):
    try:
        week = requests.get(f"{api_host}current_week/").json()
        if social_network == "tg":
            text = f"<b>{week}</b> –Ω–µ–¥–µ–ª—è"
        else:
            text = f"{week} –Ω–µ–¥–µ–ª—è"
        sender.send_message(user_id, text)
    except Exception as er:
        error_log(er)


def get_users(user_id):
    if isAdmin(user_id):
        sql_request = "COPY (SELECT * FROM users) TO STDOUT WITH CSV HEADER"
        connect, cursor = db_connect()
        if connect is None or cursor is None:
            sender.send_message(user_id, f"{sm}–Ø –ø–æ—Ç–µ—Ä—è–ª –ë–î, –∫—Ç–æ –Ω–∞–π–¥–µ—Ç –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –æ—Ö—Ä–∞–Ω–µ –∏ "
                                         f"–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
            return
        with open("temp/users.csv", "w") as output_file:
            cursor.copy_expert(sql_request, output_file)
        sender.send_doc(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "temp/users.csv")
        os.remove("temp/users.csv")
        cursor.close()
        connect.close()
    else:
        sender.send_message(user_id, f"{sm}–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª")


def get_errors(user_id):
    try:
        if isAdmin(user_id):
            sql_request = "COPY (SELECT * FROM errors) TO STDOUT WITH CSV HEADER"
            connect, cursor = db_connect()
            if connect is None or cursor is None:
                sender.send_message(user_id, f"{sm}–Ø –ø–æ—Ç–µ—Ä—è–ª –ë–î, –∫—Ç–æ –Ω–∞–π–¥–µ—Ç –æ—Å—Ç–∞–≤—å—Ç–µ –Ω–∞ –æ—Ö—Ä–∞–Ω–µ –∏ "
                                             f"–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
                return
            with open("temp/errors.csv", "w") as output_file:
                cursor.copy_expert(sql_request, output_file)
            sender.send_doc(user_id, "–õ–æ–≥ –æ—à–∏–±–æ–∫", "temp/errors.csv")
            os.remove("temp/errors.csv")
            cursor.execute("DELETE FROM errors")
            connect.commit()
            isolation_level = connect.isolation_level
            connect.set_isolation_level(0)
            cursor.execute("VACUUM FULL")
            connect.set_isolation_level(isolation_level)
            connect.commit()
            cursor.close()
            connect.close()
        else:
            sender.send_message(user_id, f"{sm}–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª")
    except Exception as er:
        error_log(er)


def get_group(user_id):
    try:
        connect, cursor = db_connect()
        cursor.execute(f"SELECT grp FROM users WHERE ids={user_id}")
        try:
            group = cursor.fetchone()[0]
            cursor.close()
            connect.close()
            return group
        except TypeError:
            sender.send_message(user_id, f"{sm}–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞\n"
                                         f"/group, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É")
            return
        except Exception as er:
            error_log(er)
    except Exception as er:
        error_log(er)
        try:
            sender.send_message(user_id, f"{sm}–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É\n"
                                         f"/group, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É")
        except Exception as err:
            error_log(err)
        return


def get_schedule(user_id, day, group, title):
    day_num = datetime.today().weekday()
    week = "week"
    if day == "tomorrow":
        day_num += 1
        if day_num > 6:
            day_num = 0
            week = "next_week"
    if day_num == 6:
        return ""
    temp = []
    for i in get_week_schedule(user_id, week, group):
        if i.split("\n")[0] == day_dict[day_num + 1]:
            temp = i.split("\n")
            temp.pop(0)
    return title + "\n".join(temp)


def get_week_schedule(user_id, week, group):
    week_num = requests.get(f"{api_host}current_week/").json()
    if week == "next_week":
        week_num = 2 if week_num == 1 else 1
    schedule = requests.get(f"{api_host}lesson/?group={group}&specific_week={week_num}")
    try:
        lessons = schedule.json()
    except Exception as er:
        error_log(er)
        sender.send_message(user_id, f"{sm}–ù–µ —É–¥–∞–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å API\n–ü—Ä–æ–≤–µ—Ä—è—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    if schedule.status_code == 503:
        try:
            print(f"–ü–æ–∏—Å–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã '{group}'")
            with open(f"cache/{group}.json") as file:
                lessons = load(file)
        except FileNotFoundError:
            if social_network == "tg":
                text = f"{sm}<b>–ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>"
            else:
                text = f"{sm}–ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            sender.send_message(user_id, text)
            return
    messages, message, prev_day = [], "", -1
    for i in lessons:
        try:
            if i['day_of_week'] != prev_day:
                if message != "":
                    messages.append(message)
                message = ""
                message += f"{day_dict[i['day_of_week']]}\n"
                prev_day = i['day_of_week']
            try:
                lesson_type = f" ({i['lesson_type']['short_name']})"
            except TypeError:
                lesson_type = ""
            if i['teacher'] is None:
                teacher = ""
            else:
                name = i['teacher'][0]['name']
                teacher = f"{get_teacher_icon(name)} {name}"
            if i['room'] is None:
                room = ""
            else:
                room = i['room']['name']
            if social_network == "tg":
                message += f"<b>{i['call']['call_num']} –ø–∞—Ä–∞ (<code>{room}</code>" \
                           f"{get_time_icon(i['call']['begin_time'])}" \
                           f"{i['call']['begin_time']} - {i['call']['end_time']})</b>\n" \
                           f"{i['discipline']['name']}{lesson_type}\n" \
                           f"{teacher}\n\n"
            else:
                message += f"{i['call']['call_num']} –ø–∞—Ä–∞ ({room}" \
                           f"{get_time_icon(i['call']['begin_time'])}" \
                           f"{i['call']['begin_time']} - {i['call']['end_time']})\n" \
                           f"{i['discipline']['name']}{lesson_type}\n" \
                           f"{teacher}\n\n"
        except Exception as er:
            error_log(er)
    messages.append(message)
    return messages


def cache():
    print("Caching schedule...")
    week_num = requests.get(f"{api_host}current_week/").json()
    failed, local_groups = 0, 0
    try:
        os.mkdir("cache")
    except FileExistsError:
        pass
    try:
        connect, cursor = db_connect()
        if connect is None or cursor is None:
            return
        cursor.execute("SELECT DISTINCT grp FROM users")
        local_groups = cursor.fetchall()
        for i in local_groups:
            res = requests.get(f"{api_host}lesson/?group={i[0]}&specific_week={week_num}")
            if res.status_code != 200:
                failed += 1
                print(f"Caching failed {res} Group '{i[0]}'")
            else:
                print(f"Caching success {res} Group '{i[0]}'")
                lessons = res.json()
                with open(f"cache/{i[0]}.json", "w") as file:
                    dump(lessons, file)
                sleep(0.1)
    except Exception as er:
        error_log(er)
    if failed == len(local_groups):
        sleep(3600)
        cache()
